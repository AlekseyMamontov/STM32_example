/*
 * DMA.h
 *
 *  Created on: Feb 10, 2025
 *      Author: oleksii
 */

#ifndef INC_DMA_H_
#define INC_DMA_H_
#include "stm32g4xx.h"

/*
 * DMA channel x configuration register (DMA_CCRx)
 *
 * Address offset: 0x08 + 0x14 * (x - 1), (x = 1 to 8)
 * Reset value: 0x0000 0000
 * Цi біти встановльються і скидаються програмно.
 * Вони не повині записуватись, коли канал увімкнено (EN = 1).
 * Доступний тільки для читання, коли канал увімкнено (EN = 1).
 *
 * Опис бітів регістра DMA
 [31:15] Зарезервовано, повинні зберігатися у значенні скидання.

 [14] MEM2MEM: Режим пам'ять-до-пам'яті
 *		0: Вимкнено
 *		1: Увімкнено
 *
 [13:12] PL[1:0]: Рівень пріоритету
 *		00: Низький
 *		01: Середній
 *		10: Високий
 *		11: Дуже високий

 [11:10] MSIZE[1:0]: Розмір пам'яті
 *	Визначає розмір даних кожного DMA-передачі до визначеної пам'яті.
 *
 *	У режимі пам'ять-до-пам'яті цей бітфілд ідентифікує джерело пам'яті,
 *		DIR = 0, призначення в пам'ять
 *		DIR = 1, джерело із пам'яті,
 *	У режимі периферія-до-периферії цей бітфілд ідентифікує джерело периферії, якщо DIR = 1,
 *	    DIR = 0  призначення периферії
 *	    DIR = 1, джерело периферія
 *	    ..
 *		00: 8 біт
 *		01: 16 біт
 *		10: 32 біт
 *		11: Зарезервовано

 [9:8] PSIZE[1:0]: Розмір периферії
 *	Визначає розмір даних кожного DMA-передачі до визначеної периферії.
 *
 *	У режимі пам'ять-до-пам'яті
 *		DIR = 0  джерело пам'ять
 *		DIR = 1  призначення пам'яті
 *
 *	У режимі периферія-до-периферії
 *	  	DIR = 0 джерело периферії
 *	  	DIR = 1 призначення периферії,
 *	  	..
 *		00: 8 біт
 *		01: 16 біт
 *		10: 32 біт
 *		11: Зарезервовано

 [7] MINC: Режим інкременту пам'яті   DMA_CMARx ( 0: Вимкнено / 1: Увімкнено)
 [6] PINC: Режим інкременту периферії DMA_CPARx ( 0: Вимкнено / 1: Увімкнено)

 [5] CIRC: Циклічний режим   0: Вимкнено / 1: Увімкнено

 [4] DIR: Напрямок передачі даних
     Цей біт повинен встановлюватись тільки в режимах пам'ять-до-периферії та периферія-до-пам'яті.
 		0: Читання з периферії
 		1: Читання з пам'яті

	Атрибути джерела визначаються PSIZE та PINC, плюс регістр DMA_CPARx.
 	Це також дійсно в режимі пам'ять-до-пам'яті.
 	Атрибути призначення визначаються MSIZE та MINC, плюс регістр DMA_CMARx.
 	Це також дійсно в режимі периферія-до-периферії.


 *
 *	Атрибути призначення визначаються PSIZE та PINC, плюс регістр DMA_CPARx.
 *	Це також дійсно в режимі пам'ять-до-пам'яті.
 *	Атрибути джерела визначаються MSIZE та MINC, плюс регістр DMA_CMARx.
 *	Це також дійсно в режимі периферія-до-периферії.
 *	Примітка:

 [3] TEIE: Увімкнення переривання при помилці передачі     0: Вимкнено / 1: Увімкнено
 [2] HTIE: Увімкнення переривання при половинній передачі  0: Вимкнено / 1: Увімкнено
 [1] TCIE: Увімкнення переривання при завершенні передачі  0: Вимкнено / 1: Увімкнено

 [0] EN: Увімкнення каналу	0: Вимкнено / 1: Увімкнено

 	Коли відбувається помилка передачі каналу, цей біт скидається апаратно.
	Він не може бути знову встановлений програмно (канал x повторно активується) до тих пір,
	поки біт TEIFx регістру DMA_ISR не буде скинутий (шляхом встановлення біта CTEIFx регістру DMA_IFCR).


 /////////// DMA channel x number of data to transfer register (DMA_CNDTRx)///////////////

  Address offset: 0x0C + 0x14 * (x - 1), (x = 1 to 8)
  Reset value: 0x0000 0000

 [31:16]     Зарезервовано, повинні зберігатися у значенні скидання.
 [15:0]  NDT: Кількість даних для передачі (від 0 до 2V16 - 1)

	 Цей бітфілд оновлюється апаратно, коли канал увімкнено:
	 Він зменшується після кожної окремої передачі DMA «читання з пам'яті, за якою йде запис»,
	 що вказує на залишок даних для передачі.

	 Він зберігається на нулі, коли досягається запланована кількість даних для передачі,
	 якщо канал не в циклічному режимі (CIRC = 0 *у регістрі DMA_CCRx).

	 Він автоматично перезавантажується попередньо запланованим значенням, коли передача завершена,
	 якщо канал у циклічному режимі *(CIRC = 1).

	 Якщо цей бітфілд дорівнює нулю, жодна передача не може бути оброблена, незалежно від статусу каналу (увімкнений чи ні).
	 Примітка: Цей бітфілд встановлюється і скидається програмно. Він не повинен записуватись, коли канал увімкнено (EN = 1). 	  *
	 Доступний тільки для читання, коли канал увімкнено (EN = 1).


/////////// DMA Channel x Peripheral Address Register (DMA_CPARx) ////////

 *		Адреса зсуву: 0x10 + 0x14 * (x - 1) (x = 1 до 8)
 *		Початкове значення: 0x0000 0000
 *
 [31:0] PA: Адреса периферії.
 *	Містить базову адресу регістра даних периферії, з якого/до якого читаються/записуються дані.
 *	Вирівнювання:
 *		16 біт (PSIZE[1:0] = 01): Біт 0 PA[31:0] ігнорується.
 *		32 біт (PSIZE[1:0] = 10): Біти 1 і 0 PA[31:0] ігноруються.
 *	Режими:
 *	Пам'ять-до-Пам'яті:
 *		DIR = 0: Адреса джерела пам'яті.
 *		DIR = 1: Адреса призначення пам'яті.
 *	Периферія-до-Периферії:
 *		DIR = 0: Адреса джерела периферії.
 *		DIR = 1: Адреса призначення периферії.
 *
 *	Примітка: Не записувати, коли канал увімкнено (EN = 1).
 *


///////// DMA Channel x Memory Address Register (DMA_CMARx)  /////////////
 *
 *		Адреса зсуву: 0x14 + 0x14 * (x - 1) (x = 1 до 8)
 *		Початкове значення: 0x0000 0000
 [31:0]: Адреса пам'яті. Містить базову адресу пам'яті, з якої/до якої читаються/записуються дані.
 *
 *	Вирівнювання:
 *
 *		16 біт (MSIZE[1:0] = 01): Біт 0 ігнорується.
 *		32 біт (MSIZE[1:0] = 10): Біти [1:0]  ігноруються.
 *
 *	Режими: RAM to RAM (MEM2MEM = 1)
 *
 *		DIR = 0: xxxx -> RAM.
 *		DIR = 1: RAM-> xxxx
 *
 *	Peripheral <-> Peripheral (MEM2MEM = 0)
 *
 *		DIR = 0: Адреса призначення периферії.
 *		DIR = 1: Адреса джерела периферії.
 *
 *	Примітка: Не записувати, коли канал увімкнено (EN = 1).

 	Таблиця напрямків передачі даних

 	Режим					DIR	Джерело (Регістр)		Призначення (Регістр)	Опис напрямку передачі
 	Пам'ять-до-Периферії	0	DMA_CMARx (пам'ять)		DMA_CPARx (периферія)	Передача з пам'яті в периферію
 	Периферія-до-Пам'яті	1	DMA_CPARx (периферія)	DMA_CMARx (пам'ять)		Передача з периферії в пам'ять

 	DIR:
 		0: Вказує на передачу даних "з" джерела (читання).
 		1: Вказує на передачу даних "в" призначення (запис).


 * */

// Налаштування DMA для передачі та прийому

#define DMA1_Ch1_enable  DMA1_Channel1->CCR |= DMA_CCR_EN;
#define DMA1_Ch1_disable DMA1_Channel1->CCR &=0xFFFE;

#define DMA1_Ch2_enable  DMA1_Channel2->CCR |= DMA_CCR_EN;
#define DMA1_Ch2_disable DMA1_Channel2->CCR &=0xFFFE;


/////////////////// INIT //////////////////////////////////////

void DMA_Init(void) {

	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;

	// SPI2 TX DMA для передачі RAM -> SPI2
	DMA1_Channel1->CCR = (1 << 4) 	|// DIR=1
						 (1 << 7) 	|// RAM++
						 (10 << 12)	|// PL Very_High
						 (1 << 8)	|// SPI2_16bit
						 (1 << 10)	;// RAM_16bit

	DMA1_Channel1->CPAR = (uint32_t) &SPI2->DR;
	DMA1_Channel1->CMAR =  0; // CMAR -> CPAR
	DMA1_Channel1->CNDTR = 0; // size (uint16_t)




	// SPI2 RX DMA для передачі DIR=0 RAM <- SPI2

	DMA1_Channel1->CCR = (0 << 4) 	|// DIR=0
						 (1 << 7) 	|// RAM++
						 (11 << 12)	|// PL Very_High
						 (1 << 8)	|// SPI2_16bit
						 (0 << 10)	;// RAM_8bit

	DMA1_Channel2->CPAR = (uint32_t) &SPI2->DR;
	DMA1_Channel1->CMAR =  0; // CMAR <- CPAR
	DMA1_Channel2->CNDTR = 0; // size 8 bit

}

 /*
 //////////  DMA interrupt status register (DMA_ISR) //////////////

	   Reset value: 0x0000 0000

  [3] TEIF1: Флаг помилки передачі (TE) для каналу 1.
  [2] HTIF1: Флаг половинної передачі (HT) для каналу 1.
  [1] TCIF1: Флаг завершення передачі (TC) для каналу 1.
  [0] GIF1: Глобальний флаг переривання для каналу 1.

 ///////////  DMA interrupt flag clear register (DMA_IFCR) ///////

  Reset value: 0x0000 0000

  [31]CTEIF8 : Скидання флага помилки передачі
  [30]CHTIF8 : Скидання флага половинної передачі – Цей біт скидає флаг половинної передачі.
  [29]CTCIF8 : Скидання флага завершення передачі – Цей біт використовується для скидання флага завершення передачі.
  [28]CGIF8  : Скидання глобального флага переривання – Цей біт скидає глобальний флаг переривання для каналу 8.

*/
// Обробник переривання для DMA

void DMA1_Channel1_IRQHandler(void) {

	if (DMA1->ISR & DMA_ISR_GIF1){

		// Перевірка на помилку передачі
		if (DMA1->ISR & DMA_ISR_TEIF1) {
			DMA1->IFCR |= DMA_IFCR_CTEIF1;// Скидання флагу помилки
		// Перевірка половинної передачі
		}else if(DMA1->ISR & DMA_ISR_HTIF1){
			DMA1->IFCR |= DMA_IFCR_CHTIF1;//половинної передачі
		// Перевірка завершення передачі
		}else if(DMA1->ISR & DMA_ISR_TCIF1){


			DMA1->IFCR |= DMA_IFCR_CTCIF1;}
	};

	DMA1->IFCR |= DMA_IFCR_CGIF1;
}


void DMA1_Channel2_IRQHandler(void) {


	if (DMA1->ISR & DMA_ISR_GIF2){

		// Перевірка на помилку передачі
		if (DMA1->ISR & DMA_ISR_TEIF2) {
			DMA1->IFCR |= DMA_IFCR_CTEIF2;// Скидання флагу помилки
		// Перевірка половинної передачі
		}else if(DMA1->ISR & DMA_ISR_HTIF2){
			DMA1->IFCR |= DMA_IFCR_CHTIF2;//половинної передачі

		// Перевірка завершення передачі
		}else if(DMA1->ISR & DMA_ISR_TCIF2){


			DMA1->IFCR |= DMA_IFCR_CTCIF2;}
	};

	DMA1->IFCR |= DMA_IFCR_CGIF2;
}



#endif /* INC_DMA_H_ */
